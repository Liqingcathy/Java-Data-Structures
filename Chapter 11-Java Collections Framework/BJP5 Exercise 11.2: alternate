/*Write a method called alternate that accepts two Lists of integers as its parameters and returns a new List containing alternating elements from the two lists, in the following order:

First element from first list
First element from second list
Second element from first list
Second element from second list
Third element from first list
Third element from second list
…
If the lists do not contain the same number of elements, the remaining elements from the longer list should be placed consecutively at the end. For example, for a first list of (1, 2, 3, 4, 5) and a second list of (6, 7, 8, 9, 10, 11, 12), a call of alternate(list1, list2) should return a list containing (1, 6, 2, 7, 3, 8, 4, 9, 5, 10, 11, 12). Do not modify the parameter lists passed in.
*/

public static List<Integer> alternate(List<Integer> l1, List<Integer> l2){
  
    Iterator<Integer> it1 = l1.iterator();
    Iterator<Integer> it2 = l2.iterator();
    
    List<Integer> list = new ArrayList<Integer>();
    
    while(it1.hasNext() || it2.hasNext()){
       if(it1.hasNext()){
           list.add(it1.next());
       }
      if(it2.hasNext()){
           list.add(it2.next());   
    }
    }
    return list;
}
